@using GpuMiningInsights.Web.Models
@using GpuMiningInsights.Core;
@using Newtonsoft.Json
@using System.Configuration
@using CreaDev.Framework.Core.Extensions
@using GpuMiningInsights.Application.Services
@model GpusInsightsReport

@{
    ViewBag.Title = "Best GPUs for mining";
    string lastUpdate = Model?.Date.ToString("dd-MM-yyyy");

    var topcoins = CoinService.Instance.Search(new SearchCriteria<Coin>(8, 1, coins => coins.OrderByDescending(c => c.ExchangeRateUsd), c => c.ExchangeRateUsd != null)
    {
    }).Result;
    int? gpuId = ViewData[Constants.GPU_ID] as int?;
    var gpuInsightsReport = Model.GpuInsightReports.FirstOrDefault(g => g.GpuId == gpuId);
    var gpuHashrates = HashrateService.Instance.Search(new SearchCriteria<Hashrate>(Int32.MaxValue, 1)
    {
        FilterExpression = g => g.ModelId == gpuInsightsReport.GpuId
    });
    var algoIds = gpuHashrates.Result.Select(s => s.AlogrthimId).ToList();
    //var algoIds =new List<int>(){1};
    var coinsIncluded = CoinService.Instance.Search(new SearchCriteria<Coin>()
    {
        FilterExpression = coin => coin.AlgorithmId != null && algoIds.Contains(coin.AlgorithmId.Value)
    }).Result;
}
@Html.Partial("~/Views/Coin/_TopCoinsPartial.cshtml", topcoins)
<br />
<br />
<br />
@if (gpuInsightsReport == null)
{
    <div class="bs-callout bs-callout-info">
        <h4>Report is being generated!</h4>
        <p> Report is being generated,Please check back later</p>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-4">
            @gpuInsightsReport.Gpu.Name
            @if (!string.IsNullOrWhiteSpace(gpuInsightsReport.Gpu.ImageUrl))
            {
                <img src="@gpuInsightsReport.Gpu.ImageUrl" style="max-width: 300px;" />
            }
        </div>
        <div class="col-md-4">
            Chipset: @gpuInsightsReport.Gpu.Model.Name.ToString()
        </div>
        <div class="col-md-4">
            @{
                var cheapestOption = gpuInsightsReport.PriceSourceItems.OrderBy(item => item.PriceUSD).FirstOrDefault();
            }
            @if (cheapestOption != null)
            {
                <a href="@cheapestOption.ItemURL" onclick="SendBuyNowClickAnalytics()" class="btn btn-primary">Buy From @cheapestOption.PriceSource.PriceSourceType.GetDisplayName()!</a>
            }
            <br />
            <button type="button" class="btn btn-primary" onclick="onBuyNowClick()">See Buying Options</button>

        </div>

    </div>
    <div class="row">
        <div class="col-md-12">
            <div style="display:inline-block;width:100%;scroll-x:auto">
                <table class="table table-bordered table-striped">
                    <thead>
                        @*

                                    System.Console.WriteLine($"GPU {gpuName} ,
                                    ProfitPerYearMinusCostUsd = {item.ProfitPerYearMinusCostUsd},
                                    Revenue ($/Day) = {item.RevenuePerDayUsd},
                                    Profit ($/Day) = {item.ProfitPerDayUsd}  ,
                                    HashRate = {item.Hashrate},
                                    HashCost = {hashPrice},
                                    FROM = {hashPriceSource } @ Price : {gpuPriceFromSource }");

                            ($"GPU {gpuName} HashRate = {item.Hashrate}, HashCost = {hashPrice}, FROM = {hashPriceSource } @ Price : {gpuPriceFromSource }");*@


                        <tr>
                            <th>Coin To Mine (Algorithm)</th>
                            <th>GPU Hashrate for Algorithm</th>
                            <th>Coins /Day</th>
                            <th>coin exchange Rate </th>
                            <th>Coin Block Reward</th>
                            <th>Revenue ($/Day)</th>
                            <th>Profit ($/Day)</th>
                            <th>Annual Revenue</th>
                            <th>Annual ROI</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int index = 0;
                            var lowestPriceSourceItem = gpuInsightsReport.LowestPriceSourceItem;
                        }
                        @foreach (var coinProfitabilityResult in gpuInsightsReport.CoinsProfitabilityResults.OrderByDescending(s => ((s.AnualRevenue - lowestPriceSourceItem.PriceUSD) / lowestPriceSourceItem.PriceUSD)))
                        {
                            double roi = Math.Round(((coinProfitabilityResult.AnualRevenue - lowestPriceSourceItem.PriceUSD) / lowestPriceSourceItem.PriceUSD) * 100, 4);






                            <tr>

                                <td>
                                    <i style="font-size: 4em;" class="cc @coinProfitabilityResult.Coin.Tag.ToUpper()"></i>
                                    <br />
                                    @coinProfitabilityResult.Coin.Name (@(coinProfitabilityResult.Hashrate.Algorithm?.Name?.ToString()))
                                </td>
                                <td>@coinProfitabilityResult.Hashrate.HashrateNumber MH/s</td>
                                <td>@Math.Round(coinProfitabilityResult.CoinsPerDay, 5)</td>
                                <td>@coinProfitabilityResult.Coin.ExchangeRateUsd $</td>
                                <td>@coinProfitabilityResult.Coin.BlockReward</td>
                                <td>@Math.Round(coinProfitabilityResult.RevenuePerDay, 5)</td>
                                <td>@Math.Round(coinProfitabilityResult.CalcProfitPerDay(lowestPriceSourceItem.PriceUSD), 5)</td>

                                <td>@(Math.Round(coinProfitabilityResult.AnualRevenue, 2)) </td>
                                <td @Html.Raw(GpuInsightReport.GetRoiCssStyle(roi))>@(roi) %</td>
                                <td></td>
                            </tr>
                            index++;
                        }
                    </tbody>



                </table>


            </div>
            <div class="row">
                <div class="col-md-offset-6 col-md-6" id="price-details-div">

                </div>
            </div>
            <div class="hidden">
                @for (int i = 0; i < Model.GpuInsightReports.Count; i++)
                {
                    GpuInsightReport gpuInsightReport = Model.GpuInsightReports[i];
                    Gpu gpuOld = gpuInsightReport.Gpu;
                    <h3></h3>
                    <table class="table table-bordered table-striped" id="gpuprices-@i">
                        <caption>
                            Buying options for @gpuOld.Name
                        </caption>
                        <thead>
                            <tr>
                                <th>GPU</th>
                                <th>Price (USD)</th>
                                <th>From</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var priceSourceItem in gpuInsightReport.PriceSourceItems.OrderBy(item => item.PriceUSD))
                            {
                                string name = priceSourceItem.ItemName;
                                name = string.IsNullOrWhiteSpace(name) ? gpuOld.Name : name;
                                <tr>
                                    <td>
                                        <a href="@priceSourceItem.ItemURL">
                                            @if (!string.IsNullOrWhiteSpace(priceSourceItem.ImageUrl))
                                            {
                                                <img src="@priceSourceItem.ImageUrl" class="img-responsive" />
                                            }
                                            @name
                                        </a>
                                    </td>
                                    <td>@priceSourceItem.PriceUSD $ </td>
                                    <td>@priceSourceItem.PriceSource.Name </td>
                                    <td>
                                        <a href="@priceSourceItem.ItemURL" onclick="SendBuyNowClickAnalytics()" class="btn btn-primary">Buy From @priceSourceItem.PriceSource.PriceSourceType.GetDisplayName()!</a>
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                }
            </div>

        </div>

    </div>


}
<div class="bs-callout bs-callout-info">
    <h4>Algorithms included</h4>
    <p>
        Report generated and comparison included coins within the following algorithms: <br />
        @gpuHashrates.Result.Select(s => s.Algorithm.Name.ToString()).ToList().ToCsv()

    </p>
</div>
<h2> Buying options</h2>

<h3></h3>
<table class="table table-bordered table-striped" id="table-buying-options">

    <thead>
        <tr>
            <th>GPU</th>
            <th>Price (USD)</th>
            <th>From</th>
            <th></th>
        </tr>
    </thead>
    <tbody>

        @foreach (var priceSourceItem in gpuInsightsReport.PriceSourceItems.OrderBy(item => item.PriceUSD))
        {
            string name = priceSourceItem.ItemName;
            name = string.IsNullOrWhiteSpace(name) ? gpuInsightsReport.Gpu.Name : name;
            <tr>
                <td>
                    <a href="@priceSourceItem.ItemURL">
                        @if (!string.IsNullOrWhiteSpace(priceSourceItem.ImageUrl))
                        {
                            <img src="@priceSourceItem.ImageUrl" class="img-responsive" />
                        }
                        @name
                    </a>
                </td>
                <td>@priceSourceItem.PriceUSD $ </td>
                <td>@priceSourceItem.PriceSource.Name </td>
                <td>
                    <a href="@priceSourceItem.ItemURL" onclick="SendBuyNowClickAnalytics()" class="btn btn-primary">Buy From @priceSourceItem.PriceSource.PriceSourceType.GetDisplayName()!</a>
                </td>
            </tr>
        }

    </tbody>
</table>

<div class="jumbotron">
    <h1>Top GPU Mining</h1>
    <br />
    <p class="lead">
        Top GPU Mining provides you with the right information for getting the best GPUs that are most profitable for mining, by considering various parameters.
    </p>
    <p>
        Last Update : @lastUpdate &nbsp;

    </p>
</div>
<p>
    by <a href="https://stackoverflow.com/users/690785/saad-alothman">Saad Alothman</a> - <a href="https://twitter.com/saad_o77">@@saad_o77</a>
    <br />
    Email: me@saadalothman.com

    <br />

    Hash rates info from : http://www.whattomine.com
    <br />
    Other stuff used:
    <br />
    https://www.cryptocompare.com/
    <br />
    https://github.com/AllienWorks/cryptocoins
    <br />
    http://www.apilayer.net/
    <br />

    Version Number: @ConfigurationManager.AppSettings["VersionNumber"]
</p>

@section scripts
{
    <script>
        function onBuyNowClick(i) {
            $('#price-details-div').html($('#gpuprices-' + i).clone());
            $('html, body').animate({
                scrollTop: $("#table-buying-options").offset().top - 200
            }, 1000);
        }
    </script>

}
